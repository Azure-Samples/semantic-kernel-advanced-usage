
## Instructions:
You are an advanced SQL query generator. Your task is to transform the following **natural language question** into a **syntactically correct** and **optimal** SQL query, respecting the provided Database Schema and Business Rules.

## **Business Rules**: you MUST follow these rules to generate the SQL query.
### START OF BUSINESS RULES

  "rules": [
    {
      "id": "AW1",
      "name": "Sales Order Filtering",
      "condition": "Look for sales orders in the question 'How many Distinct Jobtitle are there?'.",
      "action": "You will need to query tables in the Sales schema such as Sales.SalesOrderHeader and Sales.SalesOrderDetail."
    },
    {
      "id": "AW2",
      "name": "Product Information",
      "condition": "Check if the question 'How many Distinct Jobtitle are there?' is asking about products.",
      "action": "Focus on the Production.Product table and related tables like Production.ProductCategory and Production.ProductSubcategory."
    },
    {
      "id": "AW3",
      "name": "Customer Information",
      "condition": "Look for customer data in the question 'How many Distinct Jobtitle are there?'.",
      "action": "Consider using the Sales.Customer table joined with Person.Person for individual customers or Sales.Store for store customers."
    },
    {
      "id": "AW4",
      "name": "Employee Information",
      "condition": "The question 'How many Distinct Jobtitle are there?' is about employees or staff.",
      "action": "Query the HumanResources.Employee table joined with Person.Person for detailed employee information."
    },
    {
      "id": "AW5",
      "name": "Date Handling",
      "condition": "The question 'How many Distinct Jobtitle are there?' involves date ranges or time periods.",
      "action": "Use date functions on columns like OrderDate, DueDate, or ModifiedDate as appropriate. Consider using DATEADD, DATEDIFF, or BETWEEN for date ranges."
    }
  ]

### END OF BUSINESS RULES
---

## **Database Schema**
[{'TableName': 'HumanResources.Employee', 'Description': 'Employee information such as salary, department, and title.', 'Columns': [{'ColumnName': 'BusinessEntityID', 'DataType': 'int', 'Description': 'Primary key for Employee records.  Foreign key to BusinessEntity.BusinessEntityID.'}, {'ColumnName': 'BusinessEntityID', 'DataType': 'int', 'Description': 'Clustered index created by a primary key constraint.'}, {'ColumnName': 'JobTitle', 'DataType': 'nvarchar', 'Description': 'Work title such as Buyer or Sales Representative.'}, {'ColumnName': 'JobTitle', 'DataType': 'nvarchar', 'Description': 'Unique nonclustered index. Used to support replication samples.'}]}]
---

## Tables and Columns Selected through previous generation rounds:
table_column_list=[TableColumns(table_name='HumanResources.Employee', column_names=['BusinessEntityID', 'JobTitle'])] table_column_names=[TableColumns(table_name='HumanResources.Employee', column_names=['BusinessEntityID', 'JobTitle'])]

**CRITICAL AND VERY IMPORTANT**: You are restricted to the above table and columns names. You **MUST NOT** invent new tables or columns. You **MUST** use the above table and column names to generate the SQL query.
---

## **Notes from Previous Generation Steps**:
### START OF Notes from Previous Generation Steps
No notes at this point.
### END OF Notes from Previous Generation Steps
---

## **User question:**
How many Distinct Jobtitle are there?


The query **MUST COMPLY** with the following conditions:
- **Be fully functional** for answering the user's question using the provided schema.
- The SQL query must be compatible with the SQL dialect of **AZURE SQL DATABASE**
- **You MUST respect the described Business Rules** to generate the SQL query.
- **Do not invent tables, columns, or relationships** that do not exist in the schema.
- Some columns contain exact enumerated values that must be used precisely, selecting the best semantic match from the user's question.
- **Columns in fully qualified format:** Always use the full column name format; if the field is nested, it will have a prefix before it and should ALWAYS be considered part of the field name.
- **REMARKS: Be very cautious when using table and column aliases in the SQL query:** If you are using aliases for columns or tables, ensure that all columns and tables have the corresponding alias as a prefix, avoiding any missing or incorrect alias definitions or mismatches between the alias and the actual table or column names in the database schema.
- Take all necessary steps to arrive at the correct SQL query to answer the question using the database schema and applying the business rules.
- Double-check the generated SQL query to ensure it is syntactically correct and fully functional, paying special attention to table and column aliases to ensure they are used correctly, because it is **VERY IMPORTANT** that the SQL query works properly.
- Generate the SQL query in **A SINGLE LINE**, avoiding newline characters and any special characters that might cause errors when executing the query.
- You **MUST** pay special attention to the Notes from Previous Generation Steps section, as they contain important information about the user's question and the previous steps of the generation process.
- You **MUST** ensure that each column in the SQL statement belongs to the right table. You **MUST** ensure that each column is used in the right context. You **MUST** ensure that each column is used with the right alias. You **MUST** ensure that each column is used with the right aggregation function.
- You **MUST** make sure that the SQL statement you generate is **FULLY" compliant with all the Business Rules mentioned above. Go through each Business Rule and ensure that the SQL statement you generate is compliant with all of them.
- You **MUST** ensure that the SQL statement you generate is **FULLY** compliant with the Notes from Previous Generation Steps section. Go through each note and ensure that the SQL statement you generate is compliant with all of them.
- You **MUST** make sure to include all foreign keys and relationships that are relevant to the user's question that are necessary to join the tables. If the tables do not have direct relationships, please analyze the situation and include any intermediary tables that can join the tables, and might be necessary to answer the user's question.

**Return the result as a single JSON object with the following structure:**

{
	"result": "YOUR SINGLE LINE SQL QUERY HERE or null (if the question can't be answered)",
	"status": "OK | ERROR | IMPOSSIBLE" (IMPOSSIBLE if the question can't be answered using the current database. Use IMPOSSIBLE only as a very last resort, you must try your **UTMOST** to generate a valid SQL statement with what you were give),
	"reason": "The reasoning that you followed to generate the query, and the rules applied and why, or The reasoning explaining why it is not possible to answer the user's question. You can leave the 'reason' field blank if the status is 'OK'."
}

---

## ** Few-shot Examples:**
### START OF FEW SHOT EXAMPLES - use these to guide your SQL statement generation


### Example #1
User Query: from which counties do our providers come from?
Generated Query: SELECT DISTINCT G.COUNTY FROM D_HC_Providers_v3 AS P JOIN D_HC_Geography_v3 AS G ON P.ZIP_CODE = G.ZIP_CODE;

### END OF FEW SHOT EXAMPLES


**Final Considerations:**
- If the question is ambiguous, return the best possible interpretation.
- Do not generate explanations, only the SQL query.
- Ensure that the query is syntactically correct and optimal.
- Make sure that the generated JSON object is correctly formatted, and can be parsed by a JSON parser.

