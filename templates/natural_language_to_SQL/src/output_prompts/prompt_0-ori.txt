
## Instructions:
You are an advanced SQL query generator. Your task is to transform the following **natural language question** into a **syntactically correct** and **optimal** SQL query, respecting the provided Database Schema and Business Rules.

## **Business Rules**: you MUST follow these rules to generate the SQL query.
### START OF BUSINESS RULES

{
  "rules": [
    {
      "id": "B1",
      "name": "Fiction",
      "condition": "Look for tariff plans including 'ficción' contents in the question 'Show me the daily users for March 2023'.",
      "action": "You will need to look for one the following  patterns in the 'TARIFF_PLAN_DES' column: '%FICCION%', '%FICCIÓN%', '%SERIES%', '%CINE%', '%FUSIÓN TOTAL%', '%FUSION TOTAL%'. To make the proper comparison, you should use compare with uppercase letters. For instance, use a filter like this one: 'UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%FICCION%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%FICCIÓN%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%SERIES%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%CINE%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%FUSIÓN TOTAL%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%FUSION TOTAL%''"
    },
    {
      "id": "B2",
      "name": "Disney",
      "condition": "Look for tariff plans including 'Disney' contents in the question 'Show me the daily users for March 2023'.",
      "action": "You will need to look for one the following  patterns in the 'TARIFF_PLAN_DES' field: '%DISNEY%'.  To make the proper comparison, you should use compare with uppercase letters. For instance, use a filter like this one: 'UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%DISNEY%''"
    },
    {
      "id": "B3",
      "name": "Football",
      "condition": "Look for tariff plans including football contents in the question 'Show me the daily users for March 2023'.",
      "action": "You will need to look for one the following  patterns in the 'TARIFF_PLAN_DES' field: '%FUTBOL%', '%FÚTBOL%', '%FUSION TOTAL%', '%FUSIÓN TOTAL%',  '%FUSION TA TOTAL%', '%FUSIÓN TA TOTAL%', '%LIGA%', '%CHAMPION%'. To make the proper comparison, you should use compare with uppercase letters. For instance, use a filter like this one:  'UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%FUTBOL%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%FÚTBOL%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%FUSION TOTAL%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%FUSIÓN TOTAL%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%LIGA%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%CHAMPION%''"
    },
    {
      "id": "B4",
      "name": "Netflix",
      "condition": "Look for tariff plans including 'Netflix' contents in the question 'Show me the daily users for March 2023'.",
      "action": "You will need to look for one the following  patterns in the 'TARIFF_PLAN_DES' field: '%NETFLIX%', '%FICCIÓN%', '%FICCION%'. To make the proper comparison, you should use compare with uppercase letters. For instance, use a filter like this one: 'UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%NETFLIX%''"
    },
    {
      "id": "B5",
      "name": "Promociones",
      "condition": "Need to look for tariff plans including 'promotions' in the question 'Show me the daily users for March 2023'.",
      "action": "You will need to look for one the following  patterns in the 'TARIFF_PLAN_DES' field: '%PROMO%'. To make the proper comparison, you should use compare with uppercase letters. For instance, use a filter like this one: 'UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%PROMO%''"
    },
    {
      "id": "B6",
      "name": "Edad promedio 1",
      "condition": "You are using the field 'CBD_INFO_REC.CUST_AGE_NUM' in the query.",
      "action": "You are not allowed to use the field 'CBD_INFO_REC.CUST_AGE_NUM' in any query. You should use the field 'CBD_INFO_REC.CUST_AGE_SEGMENT_CD' instead."
    },
    {
      "id": "B7",
      "name": "Edad promedio 2",
      "condition": "Calculate the average age of customers.",
      "action": "You should use the  following calculation instead of AVG(CBD_INFO_REC.CUST_AGE_SEGMENT_CD): AVG(IF(CBD_INFO_REC.CUST_AGE_SEGMENT_CD = '1', NULL, CBD_INFO_REC.CUST_AGE_SEGMENT_CD))"
    },
    {
      "id": "B8.1",
      "name": "Query by customers",
      "condition": "The question 'Show me the daily users for March 2023' is about customers.",
      "action": "You should use the 'CUSTOMER_ID' field to filter by customers."
    },
    {
      "id": "B8.2",
      "name": "Query by homes",
      "condition": "The question 'Show me the daily users for March 2023' is about homes.",
      "action": "You should use the 'DEVICE_ID' field to filter by homes."
    },
    {
      "id": "B9",
      "name": "Station type",
      "condition": "The field 'STATION_TYPE_L1' or 'STATION_TYPE_L2' are used in the query.",
      "action": "The field 'STATION_TYPE_L2' corresponds to a higher aggregation level than 'STATION_TYPE_L1'.  'STATION_TYPE_L1' corresponds to an intermediate category, used only with analytical purposes."
    },
    {
      "id": "B10.1",
      "name": "Computing of homes or devices (devices are also known as homes)",
      "condition": "Check if the question: 'Show me the daily users for March 2023' is asking for a computation on devices or homes (devices are also known as homes).",
      "action": "If no other condition is set, Include this constraint in the query: 'DEVICE_INFO_REC.INACTIVITY_DEVICE_INFO_NUM < 24' (The device must be idle less than 24 hours)"
    },
    {
      "id": "B10.2",
      "name": "Computing of RSSI",
      "condition": "Check if the question: 'Show me the daily users for March 2023' is asking for a computation on RSSI",
      "action": "If no other condition is set, Include this constraint in the query: 'DEVICE_INFO_REC.INACTIVITY_DEVICE_INFO_NUM < 24' (The device must be idle less than 24 hours)"
    },
    {
      "id": "B10.3",
      "name": "Computing of symmetrical speed",
      "condition": "Check if the question: 'Show me the daily users for March 2023' is asking for a computation on symmetrical speed",
      "action": "If no other condition is set, Include this constraint in the query: 'DEVICE_INFO_REC.INACTIVITY_DEVICE_INFO_NUM < 24' (The device must be idle less than 24 hours)"
    },
    {
      "id": "B11",
      "name": "Penetración de un producto",
      "condition": "You are asked for calculating 'la penetración de un producto' in the question 'Show me the daily users for March 2023'.",
      "action": "Use ONLY in 'SELECT' clause the following formula: 'COUNT(DISTINCT DEVICE_ID) AS count, COUNT(DISTINCT DEVICE_ID) * 100.0 / SUM(COUNT(DISTINCT DEVICE_ID)) OVER ()'."
    },
    {
      "id": "B12",
      "name": "Obsolete routers",
      "condition": "You are asked for obsolete routers in the question 'Show me the daily users for March 2023'.",
      "action": "You should check for those with MANUFACT_HGU_CHIPSET_DES IN ('Askey Broadcom', 'Askey Econet','MitraStar Broadcom', 'MitraStar Econet')."
    },
    {
      "id": "B13",
      "name": "High value customers",
      "condition": "You are asked for high value customers in the question 'Show me the daily users for March 2023'.",
      "action": "Consider as high value customers those with a monthly revenue higher than 100 (TOTAL_CUST_RV > 100)."
    },
    {
      "id": "B14.1",
      "name": "Technological level formula",
      "condition": "Check the technological level of a customer in the question 'Show me the daily users for March 2023'.",
      "action": "Use ONLY in the 'SELECT' clause the following formula: 'SUM(COALESCE(D_CBD_Static_Station_Type_v6.TECH_LEVEL_WEIGHT_QT,0) + CASE WHEN STATION_BRAND_DES = 'Ubiquiti' THEN 0.8 ELSE 0 END)/COUNT(DISTINCT DAY_DT)'"
    },
    {
      "id": "B14.2",
      "name": "Technological levels",
      "condition": "You are asked for the technological level of a customer in the question 'Show me the daily users for March 2023'.",
      "action": "Consider as **high technological level** customers those with a value higher or equal to 2.5. Consider as **medium technological level** customers those with a value higher or equal to 1 and lower than 2.5. Consider as **low technological level** customers those with a value lower than 1."
    },
    {
      "id": "B15",
      "name": "Sport",
      "condition": "Look for tariff plans including 'sport' contents.",
      "action": "You will need to look for one the following  patterns in the 'TARIFF_PLAN_DES' field: '%DEPORTE%', '%TOTAL PLUS%', '%TOTAL SAT%PLUS%', '%MOTOR%', '%DAZN%'. To make the proper comparison, you should use compare with uppercase letters. For instance, use a filter like this one: '(UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%DEPORTE%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%TOTAL PLUS%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%TOTAL SAT%PLUS%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%MOTOR%' OR UPPER(${TABLE}.TARIFF_PLAN_DES) LIKE '%DAZN%')"
    },
    {
      "id": "B16.1",
      "name": "Residencial",
      "condition": "The question 'Show me the daily users for March 2023' asks for homes or residential customers.",
      "action": "Use ONLY the constraint:'CBD_INFO_REC.SEGMENT_ID = 'GP''. If you use the constraint: 'SEGMENT_DES = 'Residencial',  NEVER USE the value in English ('Residential') but the value in Spanish ('Residencial')."
    },
    {
      "id": "B16.2",
      "name": "B2C",
      "condition": "The question 'Show me the daily users for March 2023' asks for B2C.",
      "action": "Use ONLY the constraint:'CBD_INFO_REC.SEGMENT_ID in ('GP', 'AU')'. If you use the constraint: 'SEGMENT_DES IN ('Residencial', 'Autonomos'),  NEVER USE the value in English ('Residential', 'Autonomos') but the value in Spanish ('Residencial', 'Autonomos')."
    },
    {
      "id": "R1",
      "name": "Temporary table fields",
      "condition": "You use in a filter a given filed from a temporary table, built using the 'WITH' clause.",
      "action": "Make sure that the field is actually present in the SELECT statement defining the temporary table."
    },
    {
      "id": "R2",
      "name": "Temporary table field naming",
      "condition": "You write a temporary table like this: 'WITH temp_table AS (SELECT field1_prefix.field1 FROM table)'.",
      "action": "then you should use refer to the field as 'field1' and not as 'field1_prefix.field1' in the rest of the query."
    },
    {
      "id": "R3",
      "name": "Tariff plan",
      "condition": "Look for some specific tariffs in the question 'Show me the daily users for March 2023'.",
      "action": "Use the field 'TARIFF_PLAN_DES' from the dimensional table D_Fixed_Tariff_Plan instead of using 'CBD_INFO_REC.COMMERCIAL_TARIFF_ID' since this last one only contains identifiers without any meaning."
    },
    {
      "id": "R4.1",
      "name": "Station type 1",
      "condition": "The query uses 'D_CBD_Static_Station_Type_v6.STATION_TYPE_L1_DES' or 'D_CBD_Static_Station_Type_v6.STATION_TYPE_L2_DES'.",
      "action": "Answer this question: does the value you are looking for match one of the possible values of these fields? Justify your answer. Enumerate the possible values of these fields if they are used."
    },
    {
     "id": "R4.2",
     "name": "Station type 2",
     "condition": "The query uses a filter with the field 'D_CBD_Static_Station_Type_v6.STATION_TYPE_L1_DES' or 'D_CBD_Static_Station_Type_v6.STATION_TYPE_L2_DES' and the value you are looking for does not match any of the possible values of these fields.",
     "action": "You should use the field 'STATION_TYPE_CD' instead. Write the result of the previous reasoning in detail.  REMEMBER TO FIX THE QUERY TO USE THE FIELD 'STATION_TYPE_CD' INSTEAD."
    },
    {
      "id": "R5.1",
      "name": "Counting",
      "condition": "Count values (homes, devices,...) of a field in the question 'Show me the daily users for March 2023'.",
      "action": "Use: 'COUNT(DISTINCT ...)' function instead of 'COUNT(...)'."
    },
    {
      "id": "R5.2",
      "name": "Agreggation of entity",
      "condition": "it asks to obtain an entity (for example, the symmetrical velocity) in the question.",
      "action": "Group ALWAYS by the raw value of the field (for example, 'CBD_INFO_REC.BBAND_SYMMETRIC_SPEED_QT'), you should not use the 'SUM' aggregation (for example,'SUM(CBD_INFO_REC.BBAND_SYMMETRIC_SPEED_QT)')"
    },
    {
      "id": "R6",
      "name": "Time scope less than a month",
      "condition": "You are asked to answer a question for a time scope minor than a month (daily or weekly) in the question 'Show me the daily users for March 2023'.",
      "action": "you must not use the field 'MONTH_DT' in your query."
    },
    {
      "id": "R7.1",
      "name": "No UNION operator",
      "condition": "You use the UNION operator in your queries.",
      "action": "Avoid using the UNION operator in your queries."
    },
    {
      "id": "R7.2",
      "name": "Babies and pets are not comparable",
      "condition": "You ask for take care pets in the question (and not ask for babies)",
      "action": "Only use in the field 'D_CBD_Static_Station_Type_v6.STATION_TYPE_CD' the values of pets (for example, 'Smart Animal Feeder'), no should be considered the values of babies (for example, 'Smart Baby Monitor')."
    },
    {
      "id": "R7.3",
      "name": "Babies and pets are not comparable",
      "condition": "You ask for take care babies in the question (and not ask for pets).",
      "action": "Only use in the field 'D_CBD_Static_Station_Type_v6.STATION_TYPE_CD' the values of pets (for example, 'Smart Baby Monitor'), no should be considered the values of babies (for example, 'Smart Animal Feeder')."
    },
    {
      "id": "R8",
      "name": "Counting entities",
      "condition": "You are asked to count the number of customers, homes, devices or any other entities in the question 'Show me the daily users for March 2023'.",
      "action": "You should ensure that the  result is actually a count and not a list of elements. Therefore you should use the COUNT(DISTINCT...) function."
    },
    {
      "id": "R9",
      "name": "IoT devices",
      "condition": "Look for IoT (Internet of Things) devices or brands in the question 'Show me the daily users for March 2023'.",
      "action": "Use ONLY the constraint: 'D_CBD_Static_Station_Type_v6.STATION_TYPE_L2_DES = 'Smart Home''"
    },
    {
      "id": "R10.1",
      "name": "Router model",
      "condition": "Check the model of the router in the question 'Show me the daily users for March 2023'.",
      "action": "You should use the field 'MANUFACT_HGU_CHIPSET_DES' (do not use other fields such as 'MANUFACTURER_FW_VER_DES')."
    },
    {
      "id": "R10.2",
      "name": "Extender brand",
      "condition": "Indentify the brand of the extender in the question 'Show me the daily users for March 2023'.",
      "action": "You should use the field 'STATION_BRAND_DES' (do not use other fields such as 'BRAND_ID'). For example, 'STATION_BRAND_DES = Telefónica''."
    },
    {
      "id": "R10.3",
      "name": "Brand penetration",
      "condition": "Indentify brand penetration in the question 'Show me the daily users for March 2023'.",
      "action": "If no other condition is set, Include these constraints in the query:: 'STATION_BRAND_DES IS NOT NULL AND STATION_TYPE_CD IS NOT NULL'."
    },
    {
      "id": "R11",
      "name": "Weekly period",
      "condition": "Query data from weekly period.",
      "action": "You should start always with the specified day up to the same day of the following week. For instance, if you are  asked for the week starting on the day 2022-01-01, you should query data from 2022-01-01 to 2022-01-07."
    },
    {
      "id": "R12",
      "name": "WiFi type",
      "condition": "Look for information on a specific WiFi type, such as 2.4 GHz or 5 GHz.",
      "action": "You should use the specific fields corresponding to these types.  For instance, if you need to look for WiFi5 device information, you should not use the field 'STATIONS_REC.WIFI_REC.ALL_TECH_REC' but the field 'STATIONS_REC.WIFI_REC.TECH_5G_REC'."
    },
    {
      "id": "R13",
      "name": "Equivalent terms for WiFi technologies",
      "condition": "You are looking for information on WiFi technologies.",
      "action": "The following terms are considered equivalent: - 'WiFi 5G', 'WiFi Technology 5G', 'WiFi5'.- 'WiFi 2.4G', 'WiFi Technology 2.4G', 'WiFi2.4' , 'WiFi2', 'WiFi Technology 2G', 'WiFi 2G'."
    },
    {
      "id": "R14",
      "name": "Customer Satisfaction Index",
      "condition": "The query uses the field 'CSI_QT'.",
      "action": "You should keep in mind that the field 'CSI_QT' contains the 'Customer Satisfaction Index' value. It is not a quality value but a satisfaction value.  Do not confuse it with Quality Index fields."
    },
    {
      "id": "R15",
      "name": "Active HGU devices",
      "condition": "Look for active HGU devices.",
      "action": "You should keep in mind that the field 'CUST_HGU_DEVICES_NUM' contains the number of active HGU devices of the customer, i.e. the number of active routers (HGUs) of the customer.  Do not confuse it with the number of active devices of the customer."
    },
    {
      "id": "R16",
      "name": "Megabytes",
      "condition": "The query uses fields starting with 'MB_' or containing '_MB_' in their name.",
      "action": "Keep in mind that fields starting with 'MB_' or containing '_MB_' in their name refer to Megabytes. Take this into account during your queries."
    },
    {
      "id": "R17",
      "name": "Gigabytes",
      "condition": "The query uses fields starting with 'GB_' or containing '_GB_' in their name.",
      "action": "Keep in mind that fields starting with 'GB_' or containing '_GB_' in their name refer to Gigabytes. Take this into account during your queries."
    },
    {
      "id": "R18",
      "name": "RSSI meaning",
      "condition": "The query uses the field 'RSSI'.",
      "action": "Keep in mind that the field 'RSSI' refers to the 'Received Signal Strength Indicator'. It is a measure of the power present in a received radio signal."
    },
    {
      "id": "R19",
      "name": "Checking absence of a device",
      "condition": "You need to look for homes without a specific type of device.",
      "action": "You should not forget checking at least one of the following fields: 'STATION_TYPE_L1_DES', 'STATION_TYPE_L2_DES', 'STATION_TYPE_CD'. In other words, you need an explicit filter checking the absence of the device."
    }
  ]
}

### END OF BUSINESS RULES
---

## **Database Schema**
[{'TableName': 'CBD_Summary_HGU_Detail_Daily_v10', 'Description': 'Entity that collects the information associated with the HGU on a daily basis, and combines it with customer features and conectivity products.', 'Columns': [{'ColumnName': 'DAY_DT', 'DataType': 'VARCHAR', 'Description': "Year, month and day of the data. Format: YYYY-MM-DD (4 digits for year, months from 01 to 12, days from 01 to 31). Example values: '2018-04-24', '2024-09-16', '2020-06-01'"}, {'ColumnName': 'USER_4P_ID', 'DataType': 'VARCHAR', 'Description': "Unique identifier of the user (data owner) in the Kernel platform. This identifier must coincide with the 'user_id' parameter of the Kernel APIs, as they both refer to  the same concept. Format: String. Example values: '3706277557884218994', '-6189348075566519429'"}]}]
---

## Tables and Columns Selected through previous generation rounds:
table_column_list=[TableColumns(table_name='CBD_Summary_HGU_Detail_Daily_v10', column_names=['DAY_DT', 'USER_4P_ID'])]

**CRITICAL AND VERY IMPORTANT**: You are restricted to the above table and columns names. You **MUST NOT** invent new tables or columns. You **MUST** use the above table and column names to generate the SQL query.
---

## **Notes from Previous Generation Steps**:
### START OF Notes from Previous Generation Steps
Starting the SQL generation process with user query.
### END OF Notes from Previous Generation Steps
---

## **User question:**
Show me the daily users for March 2023


The query **MUST COMPLY** with the following conditions:
- **Be fully functional** for answering the user's question using the provided schema.
- The SQL query must be compatible with the SQL dialect of **SQLITE DATABASE**
- **You MUST respect the described Business Rules** to generate the SQL query.
- **Do not invent tables, columns, or relationships** that do not exist in the schema.
- Some columns contain exact enumerated values that must be used precisely, selecting the best semantic match from the user's question.
- **Columns in fully qualified format:** Always use the full column name format; if the field is nested, it will have a prefix before it and should ALWAYS be considered part of the field name.
- **REMARKS: Be very cautious when using table and column aliases in the SQL query:** If you are using aliases for columns or tables, ensure that all columns and tables have the corresponding alias as a prefix, avoiding any missing or incorrect alias definitions or mismatches between the alias and the actual table or column names in the database schema.
- Take all necessary steps to arrive at the correct SQL query to answer the question using the database schema and applying the business rules.
- Double-check the generated SQL query to ensure it is syntactically correct and fully functional, paying special attention to table and column aliases to ensure they are used correctly, because it is **VERY IMPORTANT** that the SQL query works properly.
- Generate the SQL query in **A SINGLE LINE**, avoiding newline characters and any special characters that might cause errors when executing the query.
- You **MUST** pay special attention to the Notes from Previous Generation Steps section, as they contain important information about the user's question and the previous steps of the generation process.
- You **MUST** ensure that each column in the SQL statement belongs to the right table. You **MUST** ensure that each column is used in the right context. You **MUST** ensure that each column is used with the right alias. You **MUST** ensure that each column is used with the right aggregation function.
- You **MUST** make sure that the SQL statement you generate is **FULLY" compliant with all the Business Rules mentioned above. Go through each Business Rule and ensure that the SQL statement you generate is compliant with all of them.
- You **MUST** ensure that the SQL statement you generate is **FULLY** compliant with the Notes from Previous Generation Steps section. Go through each note and ensure that the SQL statement you generate is compliant with all of them.
- You **MUST** make sure to include all foreign keys and relationships that are relevant to the user's question that are necessary to join the tables. If the tables do not have direct relationships, please analyze the situation and include any intermediary tables that can join the tables, and might be necessary to answer the user's question.

**Return the result as a single JSON object with the following structure:**

{
	"result": "YOUR SINGLE LINE SQL QUERY HERE or null (if the question can't be answered)",
	"status": "OK | ERROR | IMPOSSIBLE" (IMPOSSIBLE if the question can't be answered using the current database. Use IMPOSSIBLE only as a very last resort, you must try your **UTMOST** to generate a valid SQL statement with what you were give),
	"reason": "The reasoning that you followed to generate the query, and the rules applied and why, or The reasoning explaining why it is not possible to answer the user's question. You can leave the 'reason' field blank if the status is 'OK'."
}

---

## ** Few-shot Examples:**
### START OF FEW SHOT EXAMPLES - use these to guide your SQL statement generation


### Example #1
User Query: Number of B2C households and their average ARPA that have a pure Apple ecosystem in the week of February 1, 2025.
Generated Query: 
"WITH DD AS (
         SELECT * FROM CBD_SUMMARY_HGU_DETAIL_DAILY_V10 DD
         LEFT JOIN D_SEGMENT_V8 DS ON DD.CBD_INFO_REC_SEGMENT_ID = DS.SEGMENT_ID
         WHERE  DD.DAY_DT BETWEEN '2025-01-31' AND '2025-02-02'
         AND DS.SEGMENT_DES IN ('Residencial')
),
AGG_HGU AS (
 SELECT 
 DISTINCT 
  DD.BRAND_ID, DD.USER_4P_ID, DD.DEVICE_ID, DD.PHONE_WITH_PREFIX_ID,    
  FIRST_VALUE(CBD_INFO_REC_TOTAL_CUST_RV) OVER (PARTITION BY DD.BRAND_ID, DD.USER_4P_ID, DD.DEVICE_ID, DD.PHONE_WITH_PREFIX_ID ORDER BY DAY_DT DESC)  AS CBD_INFO_REC_TOTAL_CUST_RV
 FROM DD
 WHERE DD.DEVICE_INFO_REC_INACTIVITY_DEVICE_INFO_NUM < 24
),
AGG_STATIONS AS (
 SELECT 
 BRAND_ID, USER_4P_ID, DEVICE_ID, PHONE_WITH_PREFIX_ID,
   CASE
  WHEN  STATIONS_SMARTPHONE_OS_ANDROID_NUM = 0 AND STATIONS_SMARTPHONE_OS_IOS_NUM > 0                               THEN 'Only iOS'
  WHEN  STATIONS_SMARTPHONE_OS_ANDROID_NUM > 0 AND STATIONS_SMARTPHONE_OS_IOS_NUM = 0                               THEN 'Only Android'
  WHEN  STATIONS_SMARTPHONE_OS_ANDROID_NUM>STATIONS_SMARTPHONE_OS_IOS_NUM OR
    (  STATIONS_SMARTPHONE_OS_ANDROID_NUM=STATIONS_SMARTPHONE_OS_IOS_NUM AND STATIONS_SMARTPHONE_OS_ANDROID_NUM>0 AND STATIONS_SMARTPHONE_OS_ANDROID_HOURS_NUM>STATIONS_SMARTPHONE_OS_IOS_HOURS_NUM )   THEN 'Android>iOS'
  WHEN STATIONS_SMARTPHONE_OS_ANDROID_NUM<STATIONS_SMARTPHONE_OS_IOS_NUM OR
    ( STATIONS_SMARTPHONE_OS_ANDROID_NUM=STATIONS_SMARTPHONE_OS_IOS_NUM AND STATIONS_SMARTPHONE_OS_IOS_NUM>0      AND  STATIONS_SMARTPHONE_OS_ANDROID_HOURS_NUM<=STATIONS_SMARTPHONE_OS_IOS_HOURS_NUM ) THEN 'iOS>Android'
  WHEN STATIONS_SMARTPHONE_OS_ANDROID_NUM=0 AND STATIONS_SMARTPHONE_OS_IOS_NUM=0 AND STATIONS_SMARTPHONE_OS_OTHERS_NUM>0                       THEN 'Other'
  WHEN STATIONS_SMARTPHONE_OS_ANDROID_NUM=0 AND STATIONS_SMARTPHONE_OS_IOS_NUM=0 AND STATIONS_SMARTPHONE_OS_OTHERS_NUM=0 AND STATIONS_SMARTPHONE_OS_UNKNOWN_NUM>0             THEN 'Unknown'
  WHEN STATIONS_SMARTPHONE_OS_ANDROID_NUM+STATIONS_SMARTPHONE_OS_IOS_NUM+STATIONS_SMARTPHONE_OS_OTHERS_NUM+STATIONS_SMARTPHONE_OS_UNKNOWN_NUM=0                   THEN 'N/A'
  ELSE ''
 END AS MOBILE_ECOSYSTEM
 FROM(
  SELECT 
   DD.BRAND_ID, DD.USER_4P_ID, DD.DEVICE_ID, DD.PHONE_WITH_PREFIX_ID,
   -- Ecosystem OS SMARTPHONE at Household
   COUNT(DISTINCT CASE WHEN SD.STATION_TYPE_CD IN ( 'Apple Handheld Device', 'Smartphone','Tablet','Smartphone/Tablet' ) AND SD.STATION_OS_KERNEL_DES IN ( ""Android"",""Fire OS"" ) THEN SD.UNQ_STATION_ID  ELSE NULL END)                   AS STATIONS_SMARTPHONE_OS_ANDROID_NUM,
   COUNT(DISTINCT CASE WHEN SD.STATION_TYPE_CD IN ( 'Apple Handheld Device', 'Smartphone','Tablet','Smartphone/Tablet' ) AND SD.STATION_OS_KERNEL_DES =""iOS""     THEN SD.UNQ_STATION_ID ELSE NULL END)                       AS STATIONS_SMARTPHONE_OS_IOS_NUM,
   COUNT(DISTINCT CASE WHEN SD.STATION_TYPE_CD IN ( 'Apple Handheld Device', 'Smartphone','Tablet','Smartphone/Tablet' ) AND SD.STATION_OS_KERNEL_DES IS NULL    THEN SD.UNQ_STATION_ID ELSE NULL END)                       AS STATIONS_SMARTPHONE_OS_UNKNOWN_NUM,
   COUNT(DISTINCT CASE WHEN SD.STATION_TYPE_CD IN ( 'Apple Handheld Device', 'Smartphone','Tablet','Smartphone/Tablet' ) AND SD.STATION_OS_KERNEL_DES IS NOT NULL AND SD.STATION_OS_KERNEL_DES NOT IN (""Android"",""iOS"", ""Fire OS"")    THEN SD.UNQ_STATION_ID ELSE NULL END)  AS STATIONS_SMARTPHONE_OS_OTHERS_NUM,
   SUM( CASE WHEN SD.STATION_TYPE_CD IN ( 'Apple Handheld Device', 'Smartphone','Tablet','Smartphone/Tablet' ) AND SD.STATION_OS_KERNEL_DES IN ( ""Android"",""Fire OS"" )  THEN COALESCE(SD.DISTINCT_HOURS_NUM,0 )  ELSE 0 END ) AS STATIONS_SMARTPHONE_OS_ANDROID_HOURS_NUM,
   SUM( CASE WHEN SD.STATION_TYPE_CD IN ( 'Apple Handheld Device', 'Smartphone','Tablet','Smartphone/Tablet' ) AND SD.STATION_OS_KERNEL_DES =""iOS""      THEN COALESCE(SD.DISTINCT_HOURS_NUM,0)  ELSE 0 END )           AS STATIONS_SMARTPHONE_OS_IOS_HOURS_NUM
  FROM DD
  LEFT JOIN CBD_SUMMARY_HGU_STATIONS_DAILY_V10 SD
   ON DD.DEVICE_ID = SD.DEVICE_ID AND DD.DAY_DT=SD.day_dt 
   AND DD.BRAND_ID = SD.BRAND_ID 
   AND DD.PHONE_WITH_PREFIX_ID = SD.PHONE_WITH_PREFIX_ID AND DD.USER_4P_ID = SD.USER_4P_ID  
  WHERE DD.DEVICE_INFO_REC_INACTIVITY_DEVICE_INFO_NUM < 24 
  GROUP BY 1,2,3,4
 )
)  
SELECT
 COUNT(DISTINCT AH.DEVICE_ID) AS HOGARES_NUM,
 AVG(CBD_INFO_REC_TOTAL_CUST_RV) AS TOTAL_CUST_RV_AVG
FROM AGG_HGU AH
LEFT JOIN AGG_STATIONS ASH 
 ON  AH.BRAND_ID = ASH.BRAND_ID AND AH.USER_4P_ID = ASH.USER_4P_ID AND AH.DEVICE_ID = ASH.DEVICE_ID AND AH.PHONE_WITH_PREFIX_ID = ASH.PHONE_WITH_PREFIX_ID
WHERE MOBILE_ECOSYSTEM =  'Only iOS';"


### Example #2
User Query: Tell me the number of homes with Telefónica extenders and the number of homes with competitor extenders on February 1, 2025. Consider the Residential segment. The device must be inactive for less than 24 hours.
Generated Query: 
"WITH extenders AS (
    SELECT 
        h.DEVICE_ID, 
        MAX(
            CASE 
                WHEN s.STATION_BRAND_DES = 'Telefónica' THEN 1 
                ELSE 0 
            END
        ) AS Has_Telefonica_Extenders, 
        MAX(
            CASE 
                WHEN s.STATION_BRAND_DES <> 'Telefónica' OR s.STATION_BRAND_DES IS NULL THEN 1 
                ELSE 0 
            END
        ) AS Has_Competitor_Extenders 
    FROM CBD_SUMMARY_HGU_DETAIL_DAILY_V10 h
    JOIN CBD_SUMMARY_HGU_STATIONS_DAILY_V10 s 
        ON h.DEVICE_ID = s.DEVICE_ID
        AND s.DAY_DT = h.DAY_DT
        AND h.BRAND_ID = s.BRAND_ID
        AND h.PHONE_WITH_PREFIX_ID = s.PHONE_WITH_PREFIX_ID
        AND h.USER_4P_ID = s.USER_4P_ID
    WHERE h.DAY_DT = '2025-02-01'
    AND h.CBD_INFO_REC_SEGMENT_ID = 'GP'
    AND h.DEVICE_INFO_REC_INACTIVITY_DEVICE_INFO_NUM < 24
    AND s.STATION_TYPE_CD = 'WiFi Extender'
    GROUP BY h.DEVICE_ID
) 
SELECT 
    SUM(Has_Telefonica_Extenders) AS HOMES_WITH_TEF_WE_NUM, 
    SUM(Has_Competitor_Extenders) AS HOMES_WITH_NO_TEF_WE_NUM 
FROM extenders;
"


### Example #3
User Query: Tell me how many high-value residential customer households have an average quality index of less than 85 and more than 8 connected devices, including a multimedia device, on January 31, 2025.
Generated Query: 
"WITH DD AS (
  SELECT 
    *, 
    FIRST_VALUE(DD.CBD_INFO_REC_TOTAL_CUST_RV) OVER (
      PARTITION BY DD.BRAND_ID, DD.USER_4P_ID, DD.DEVICE_ID, DD.PHONE_WITH_PREFIX_ID 
      ORDER BY DD.DAY_DT DESC
    ) AS TOTAL_CUST_RV, 
    FIRST_VALUE(DD.CBD_INFO_REC_MONTH_DT) OVER (
      PARTITION BY DD.BRAND_ID, DD.USER_4P_ID, DD.DEVICE_ID, DD.PHONE_WITH_PREFIX_ID 
      ORDER BY DD.DAY_DT DESC
    ) AS CUST_MONTH_DT, 
    AVG(DD.QUALITY_REC_HOUSEHOLD_QUALITY_INDEX_QT) OVER (
      PARTITION BY DD.BRAND_ID, DD.USER_4P_ID, DD.DEVICE_ID, DD.PHONE_WITH_PREFIX_ID
    ) AS HOUSEHOLD_QUALITY_INDEX 
  FROM CBD_SUMMARY_HGU_DETAIL_DAILY_V10 DD 
  WHERE day_dt = '2025-01-31' AND DD.DEVICE_INFO_REC_INACTIVITY_DEVICE_INFO_NUM < 24 AND DD.CBD_INFO_REC_SEGMENT_ID = 'GP'
), 
AGG_DEVICES AS (
  SELECT 
    DD.BRAND_ID, 
    DD.USER_4P_ID, 
    DD.DEVICE_ID, 
    DD.PHONE_WITH_PREFIX_ID, 
    DD.TOTAL_CUST_RV, 
    DD.CUST_MONTH_DT, 
    HOUSEHOLD_QUALITY_INDEX, 
    COUNT(DISTINCT SD.UNQ_STATION_ID) AS NUM_STATIONS, 
    COUNT(DISTINCT CASE WHEN ST.STATION_TYPE_L2_DES = 'Multimedia Entertainment' THEN SD.UNQ_STATION_ID ELSE NULL END) AS NUM_MULTIMEDIA_STATIONS 
  FROM DD 
  LEFT JOIN CBD_SUMMARY_HGU_STATIONS_DAILY_V10 SD ON DD.DEVICE_ID = SD.DEVICE_ID AND DD.BRAND_ID = SD.BRAND_ID AND DD.PHONE_WITH_PREFIX_ID = SD.PHONE_WITH_PREFIX_ID AND DD.USER_4P_ID = SD.USER_4P_ID AND DD.DAY_DT = SD.DAY_DT 
  LEFT JOIN D_CBD_STATIC_STATION_TYPE_V6 ST ON SD.STATION_TYPE_CD = ST.STATION_TYPE_CD 
  GROUP BY 1, 2, 3, 4, 5, 6, 7
) 
SELECT COUNT(DISTINCT AST.DEVICE_ID) AS HOMES_NUM FROM AGG_DEVICES AST WHERE TOTAL_CUST_RV >= 100 AND NUM_MULTIMEDIA_STATIONS > 0 AND NUM_STATIONS > 8 AND HOUSEHOLD_QUALITY_INDEX < 85;
"




### END OF FEW SHOT EXAMPLES


**Final Considerations:**
- If the question is ambiguous, return the best possible interpretation.
- Do not generate explanations, only the SQL query.
- Ensure that the query is syntactically correct and optimal.
- Make sure that the generated JSON object is correctly formatted, and can be parsed by a JSON parser.

